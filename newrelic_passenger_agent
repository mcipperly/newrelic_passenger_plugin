#!/usr/bin/env ruby

# Passenger agent to monitor status of passenger servers

require "rubygems"
require "bundler/setup"
require "newrelic_plugin"
require "nokogiri"
require File.join(File.dirname(__FILE__), 'lib/status_parser')
require File.join(File.dirname(__FILE__), 'test/test_helper')

module PassengerAgent

  class Agent < NewRelic::Plugin::Agent::Base

    agent_guid "com.aeo.passenger"
    agent_version "0.0.1"
    agent_config_options :passenger_status, :passenger_free
    # Name of instance that will display in New Relic
    agent_human_labels("Passenger") { "#{`hostname`}" }

# Send stats to New Relic
    def poll_cycle

      #initialize
      @status = Status.new(run_command(passenger_status))

      # Report data from passegner-status command
      report_metric "passenger/processes/max", "Processes", @status.max
      report_metric "passenger/processes/running", "Processes", @status.current
      report_metric "passenger/queue/waiting", "Requests", @status.queue
      # report_metric "passenger/totals/sessions", "Sessions", @status.sessions
      @status.cpu.each do |app, cpu_pct|
        report_metric "passenger/cpu/detail/#{app}", "CPU%", cpu_pct
      end
      # session count by app
      @status.sessions.each do |app, sess_ct|
        report_metric "passenger/sessions/detail/#{app}", "sessions", sess_ct
      end
      # Memory usage by app
      @status.process_memory.each do |app, memory_usage|
        report_metric "passenger/memory/detail/#{app}", "MB", memory_usage
      end
      # Time since last used, by passenger worker
      @status.last_used_time.each do |worker_num, time_elapsed|
        report_metric "passenger/workers/time_since_last_used/#{worker_num}", "s", time_elapsed
      end
      @status.uptime.each do |app, uptime_sec|
        report_metric "passenger/workers/uptime/#{app}", "s", uptime_sec
      end
      @status.processed.each do |app, req_ct|
        report_metric "passenger/workers/requests/#{app}", "requests", req_ct
      end

    end

    private

# Run command on passenger server to get data
    def run_command(command)

      result = `#{command}`
      unless $?.success?
        $stderr.puts "command: #{command} failed"
        exit 1
      end
      result
    end

  # Register this agent with the component.
  NewRelic::Plugin::Setup.install_agent :passenger, PassengerAgent

  # Launch the agent; this never returns.
  NewRelic::Plugin::Run.setup_and_run
  end

end
